#!/usr/bin/env python3

import logging
import os
from argparse import ArgumentParser

# Need at least PyGithub version 1.43 for topic support
from github import Github

TOPIC = 'hacktoberfest'


def handle_repository(repository, set_topics):
    original_topics = repository.get_topics()
    logging.debug('Repository %s has %s', repository.name, original_topics)

    if TOPIC not in original_topics:
        print(f'Repository {repository.name} is missing {TOPIC}')

        if set_topics:
            new_topics = original_topics + [TOPIC]
            print(f'Setting topics for {repository.name} to {new_topics} (was {original_topics})')
            repository.replace_topics(new_topics)


def update_topics(organization_name, token, set_topics):
    github = Github(token)

    user = github.get_organization(organization_name)

    for repository in sorted(user.get_repos(), key=lambda repository: repository.name):
        if not repository.archived:
            handle_repository(repository, set_topics)


def main():
    parser = ArgumentParser(description='Set Github repository topics based on repository content')
    parser.add_argument('--organization', default='voxpupuli', help='Github organization name')
    parser.add_argument('--set-topics', help='Set topics, otherwise shows what would be done',
                        action='store_true')
    parser.add_argument('--verbose', '-v', help='Show debug output', action='store_true')

    args = parser.parse_args()

    log_level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(level=log_level)

    try:
        token = os.environ['GITHUB_TOKEN']
    except KeyError:
        raise SystemExit('Set the GITHUB_TOKEN environment variable to a valid Github token')

    try:
        update_topics(args.organization, token, args.set_topics)
    except KeyboardInterrupt:
        pass


if __name__ == '__main__':
    main()
